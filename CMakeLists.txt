# Init CMake (require at least version 2.6)
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

# General build settings
IF (NOT CMAKE_BUILD_TYPE)
	SET(CMAKE_BUILD_TYPE "Release" CACHE STRING "Possible build types: None Debug Release RelWithDebInfo MinSizeRel")
ENDIF()

IF (NOT ENABLE_VISUALIZER)
	SET(ENABLE_VISUALIZER 0 CACHE BOOL "Enable compiling and linking the Visualizer module.")
ENDIF()

IF (NOT ENABLE_NET_STREAM)
	SET(ENABLE_NET_STREAM 0 CACHE BOOL "Enable TCP server module for sending data over the network.")
ENDIF()

IF (NOT DVS128 AND NOT DAVISFX2 AND NOT DAVISFX3)
	MESSAGE(SEND_ERROR "Please specify one of the following options to select a supported device: DVS128, DAVISFX2, DAVISFX3.")
	RETURN()
ENDIF()

# Project name and version
PROJECT(cAER C)
SET(PROJECT_VERSION_MAJOR 0)
SET(PROJECT_VERSION_MINOR 9)
SET(PROJECT_VERSION_PATCH 10)
SET(PROJECT_VERSION_NOREV ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH})
IF (NOT PROJECT_REVISION)
	EXECUTE_PROCESS(COMMAND svnversion OUTPUT_VARIABLE PROJECT_REVISION OUTPUT_STRIP_TRAILING_WHITESPACE)
	# EXECUTE_PROCESS(COMMAND git rev-parse HEAD OUTPUT_VARIABLE PROJECT_REVISION OUTPUT_STRIP_TRAILING_WHITESPACE)
ENDIF()
SET(PROJECT_VERSION ${PROJECT_VERSION_NOREV}-r${PROJECT_REVISION})
MESSAGE(STATUS "Project version is: ${PROJECT_VERSION}")

# Define installation paths.
INCLUDE(GNUInstallDirs)

# Set compiler info
SET(CC_CLANG FALSE)
SET(CC_GCC FALSE)
SET(CC_ICC FALSE)
SET(CC_MSVC FALSE)

IF ("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang")
	SET(CC_CLANG TRUE)
ELSEIF ("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
	SET(CC_GCC TRUE)
ELSEIF ("${CMAKE_C_COMPILER_ID}" STREQUAL "Intel")
	SET(CC_ICC TRUE)
ELSEIF ("${CMAKE_C_COMPILER_ID}" STREQUAL "MSVC")
	SET(CC_MSVC TRUE)
ENDIF()

# Test if we are on a big-endian architecture
INCLUDE(TestBigEndian)
TEST_BIG_ENDIAN(SYSTEM_BIGENDIAN)

# C11 standard needed (atomics, threads)
IF (CC_GCC OR CC_CLANG)
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c11")
ENDIF()

# Check size of various types
INCLUDE(CheckTypeSize)
CHECK_TYPE_SIZE("size_t" SIZEOF_SIZE_T)
CHECK_TYPE_SIZE("void *" SIZEOF_VOID_PTR)

IF (NOT "${SIZEOF_VOID_PTR}" STREQUAL "${SIZEOF_SIZE_T}")
	MESSAGE(SEND_ERROR "Size of void * and size_t must be the same!")
ENDIF()

# Check threads support (almost nobody implements C11 threads yet!)
FIND_PACKAGE(Threads)
SET(HAVE_PTHREADS ${CMAKE_USE_PTHREADS_INIT})
SET(HAVE_WIN32_THREADS ${CMAKE_USE_WIN32_THREADS_INIT})

IF (HAVE_PTHREADS)
	ADD_DEFINITIONS(-DHAVE_PTHREADS=1)

	# POSIX system (Unix, Linux, MacOS X)
	ADD_DEFINITIONS(-D_XOPEN_SOURCE=700)
	ADD_DEFINITIONS(-D_DEFAULT_SOURCE=1)

	IF (APPLE)
		ADD_DEFINITIONS(-D_DARWIN_C_SOURCE=1)
	ENDIF()

	# Support for large files (>2GB) on 32-bit systems
	ADD_DEFINITIONS(-D_FILE_OFFSET_BITS=64)
ENDIF()

IF (HAVE_WIN32_THREADS)
	ADD_DEFINITIONS(-DHAVE_WIN32_THREADS=1)
ENDIF()

# Forward settings as defines
IF (ENABLE_VISUALIZER)
	ADD_DEFINITIONS(-DENABLE_VISUALIZER=1)
ENDIF()

IF (ENABLE_NET_STREAM)
	ADD_DEFINITIONS(-DENABLE_NET_STREAM=1)
ENDIF()

IF (DVS128)
	ADD_DEFINITIONS(-DDVS128=1)
ENDIF()

IF (DAVISFX2)
	ADD_DEFINITIONS(-DDAVISFX2=1)
ENDIF()

IF (DAVISFX3)
	ADD_DEFINITIONS(-DDAVISFX3=1)
ENDIF()

# Enable all warnings for GCC / Clang
IF (CC_GCC OR CC_CLANG)
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pedantic -Wall -Wextra")

	IF (CC_GCC)
		# Enable all useful warnings manually in GCC.
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wunused -Wundef -Wformat=2 -Winit-self -Wuninitialized")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wstrict-prototypes -Wmissing-prototypes -Wredundant-decls")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wmissing-declarations -Wnested-externs -Wstack-protector")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wshadow -Wbad-function-cast -Wfloat-equal")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wconversion -Wstrict-overflow=2")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wjump-misses-init -Wunsuffixed-float-constants -Wdouble-promotion")
	ENDIF()

	IF (CC_CLANG)
		# Enable all warnings in Clang easily.
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Weverything -Wno-packed -Wno-padded -Wno-unreachable-code-break")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-disabled-macro-expansion")
	ENDIF()
ENDIF()

# Search for external libraries with pkg-config
INCLUDE(FindPkgConfig)

# Basic USB device support and configuration
PKG_CHECK_MODULES(LIBCAER REQUIRED libcaer>=1.0.2)
PKG_CHECK_MODULES(MXML REQUIRED mxml>=2.7)
SET(CAER_LIBS ${LIBCAER_LIBRARIES} ${MXML_LIBRARIES})
SET(CAER_LIBDIRS ${LIBCAER_LIBRARY_DIRS} ${MXML_LIBRARY_DIRS})
SET(CAER_INCDIRS ${LIBCAER_INCLUDE_DIRS} ${MXML_INCLUDE_DIRS})
file(GLOB_RECURSE CAER_INI_FILES modules/ini/*.c)
SET(CAER_SRC_FILES ${CAER_INI_FILES})

# Basic IN/OUT support
file(GLOB_RECURSE CAER_MISC_FILES modules/misc/*.c)
SET(CAER_SRC_FILES ${CAER_SRC_FILES} ${CAER_MISC_FILES})

# Common filters
file(GLOB_RECURSE CAER_BA_FILES modules/backgroundactivityfilter/*.c)
SET(CAER_SRC_FILES ${CAER_SRC_FILES} ${CAER_BA_FILES})

file(GLOB_RECURSE CAER_STAT_FILES modules/statistics/*.c)
SET(CAER_SRC_FILES ${CAER_SRC_FILES} ${CAER_STAT_FILES})

IF (ENABLE_VISUALIZER)
	# Visualizer support
	PKG_CHECK_MODULES(GLFW3 REQUIRED glfw3>=3.0.4)
	PKG_CHECK_MODULES(OPENGL REQUIRED gl)
	IF (NOT APPLE)
		FIND_PACKAGE(GLUT REQUIRED)
	ENDIF()
	SET(CAER_LIBS ${CAER_LIBS} ${OPENGL_LIBRARIES} ${GLFW3_LIBRARIES} ${GLUT_LIBRARIES})
	SET(CAER_LIBDIRS ${CAER_LIBDIRS} ${OPENGL_LIBRARY_DIRS} ${GLFW3_LIBRARY_DIRS} ${GLUT_LIBRARY_DIRS})
	SET(CAER_INCDIRS ${CAER_INCDIRS} ${OPENGL_INCLUDE_DIRS} ${GLFW3_INCLUDE_DIRS} ${GLUT_INCLUDE_DIRS})
	file(GLOB_RECURSE CAER_VISUALIZER_FILES modules/visualizer/*.c)
	SET(CAER_SRC_FILES ${CAER_SRC_FILES} ${CAER_VISUALIZER_FILES})
ENDIF()

# Add local directory to include paths
SET(CAER_INCDIRS ${CAER_INCDIRS} ${CMAKE_SOURCE_DIR}/)

INCLUDE_DIRECTORIES(${CAER_INCDIRS})
LINK_DIRECTORIES(${CAER_LIBDIRS})

# Set full RPATH
SET(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR})
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
IF (APPLE)
	SET(CMAKE_MACOSX_RPATH TRUE)
ENDIF()

IF (UNIX AND NOT APPLE)
	# Add --as-needed to linker flags for executables.
	SET(CMAKE_EXE_LINKER_FLAGS "-Wl,--as-needed")
ENDIF()

# Compile cAER
file(GLOB_RECURSE CAER_EXT_FILES ext/*.c)
file(GLOB_RECURSE CAER_BASE_FILES base/*.c)

# Add math support
SET(CAER_LIBS ${CAER_LIBS} m)

# Add realtime support, not needed on MacOS X though
IF (NOT APPLE)
	SET(CAER_LIBS ${CAER_LIBS} rt)
ENDIF()

ADD_EXECUTABLE(caer-bin ${CAER_EXT_FILES} ${CAER_BASE_FILES} ${CAER_SRC_FILES} main.c)
TARGET_LINK_LIBRARIES(caer-bin ${CMAKE_THREAD_LIBS_INIT} ${CAER_LIBS})
INSTALL(TARGETS caer-bin DESTINATION ${CMAKE_INSTALL_BINDIR})

# Compile cAERCtl
ADD_EXECUTABLE(caer-ctl ext/sshs/sshs_helper.c utils/ext/linenoise/linenoise.c utils/caerctl/caerctl.c)
INSTALL(TARGETS caer-ctl DESTINATION ${CMAKE_INSTALL_BINDIR})

# Compile UDP stream statistics program
ADD_EXECUTABLE(udpststat utils/udpststat/udpststat.c)
TARGET_LINK_LIBRARIES(udpststat ${LIBCAER_LIBRARIES})
INSTALL(TARGETS udpststat DESTINATION ${CMAKE_INSTALL_BINDIR})

# Compile TCP stream statistics program
ADD_EXECUTABLE(tcpststat utils/tcpststat/tcpststat.c)
TARGET_LINK_LIBRARIES(tcpststat ${LIBCAER_LIBRARIES})
INSTALL(TARGETS tcpststat DESTINATION ${CMAKE_INSTALL_BINDIR})

# Compile Unix local stream statistics program
ADD_EXECUTABLE(unixststat utils/unixststat/unixststat.c)
TARGET_LINK_LIBRARIES(unixststat ${LIBCAER_LIBRARIES})
INSTALL(TARGETS unixststat DESTINATION ${CMAKE_INSTALL_BINDIR})
